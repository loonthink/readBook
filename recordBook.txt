continue (跳过此次循环)

break	（结束循环语句）

return 

while 
	内部必须有控制变量变化的机制  否则会陷入死循环
	例如 i++ (递归等)
	例如
		for(var i=0; i< 20; i++){
			while(i>10) {
				//doSomeThing
				分析 i的值 永远都是0 因为 它不来这个语句 一直不满足 i>10
			}
		}

do{
	//先执行
	i++
}while(i<5)

while(i<5){
	//后执行
	i++
}

switch(条件){
	case key:
		dosomething
	default:
		dosomething
}

DATE
	getTime() 返回表示日期的毫秒数 与valueof() 方法返回的值相同
	getFullYear() 取得四位数的年份
	getMonth() 返回日期中的月份 0 表示一月 11 表示12
	getDate() 返回日期中的天数
	getDay() 返回日期中的星期数 0是星期日 6是星期六


JSON
	1.JSON的语法可以表示下面三种类型的值
		1.简单值  可以在JSON中表示字符串、数值、布尔值 和 null  但是json 不支持javascript 中的 undefined
			数值 5
			字符串 "hello world" 必须用双引号括起来
		2.对象 键值对儿  
			//javascript的对象字面量
			var object = {
				name: "jack",
				age: 29
			}
			JSON 中的key 必须用双引号括起来
			{
				"name": "jack"
				"age": 29
			}
		3.数组
		
	2.方法
		JSON.stringify(对象传入) 将javascript对象序列化为JSON字符串
			除传入对象外，还可接受两个参数
				第一个是 过滤器
					可以是一个是数组，可以是一个函数
						数组的话 
						var obj = {
							"name":"jhon"
							"age":29
						}
						var str = JSON.stringify(obj, [name]) ==> str ==> {"name":"jhon"}
						函数的话
						var str = JSON.stringify(obj, funciton(key, value){
							switch(key){
								case "name":
									return "哇哈哈"
								case "age":
									return undefinded //表示删除该属性
								default: //注意这一步是必须的
									return value
							}
						}) ==> str = {"name":"哇哈哈"}
						
				第二个是 生成的字符串的是否保持缩进的格数
					为数字的时候
					var str = JSON.stringify(obj, null, 4)
						str = {
							"name":"jhon"
							"age":29
						} //注意此时是保持缩进的字符串
					为字符串的时候
					var str = JSON.stringify(obj, null, '--')
						str = {
						--"name":"jhon"
						--"age":29
						} //注意此时是保持缩进的字符串
				var obj = {"name":"bbb","aaa":"vvv",toJSON:function(){ return this.name }}
				var str = JSON.stringify(obj) ==> str = "bbb" 
					对象序列化的规则
					//（1）如果有toJSON,则读取toJSON方法里的值
					//（2）如果有过滤器（数组或函数的过滤器）则应用该过滤器 传入函数过滤器的值是按（1）步返回的值
					// 对第二步返回的每个值进行相应的序列化
					// 如果提供了第三个参数，执行相应的格式化
					
		JSON.parse(对象传入)	将JSON字符串解析为原生的javascript值
			除传入对象外，还可接受一个函数过滤器 功能等同于JSON.stringify
object 
	①创建对象的两种方式
		var obj = new Object();
			obj.name = 'aa';
			或者
			直接使用 ②对象字面量 包裹
		var obj = {
			name:'aa',
			1:'aaadd'
		}
		③key可以不使用 引号包裹 但是不使用引号包裹的话 遇到非法字符 就会报错
		如：
		var obj = {
			3333name:999
		}  定义直接导致报错   加上 引号 就好了 访问的时候 使用 中括号[] 来访问
		
		④对于 含有特殊字符的key 最好使用 中括号包裹的方式来求值

原生
	原生 改动class
		el.className  获取到的 是字符串
		el.classList  获取到的 是一个对象
			el.classList.add('className')
			el.classList.remove('className') 
		
		
		
es6
	转换为数组
	
	① 传参为多个
	Array.of(1,2,3,6,5) 将参数转换为 数组 ==> [1,2,3,6,5]
		注意 str.split('') 参数 是要传递 以什么格式转为切割符转换为数组的
	② 传参为一个整的字符串
	Array.from() 
		①将类数组 或 可遍历的对象 转换为真正的对象
		②将字符串转换为数组  Array.from('hello') ==> [h,e,l,l,o] 
		
		eg: var str = 'a,s,d,f' var arr1 = str.split(',') ==> [a,s,d,f]  这里就需要传入逗号切割符
		
	Array.find(function(value) {
		return value > 2
	} )  ==>  查找到符合条件的值 直接返回对应的项 如果查找不到 则 返回undefined
	
	arr.findIndex(funciton(value){return value>2}) 此返回的是 符合条件的值的下标，如果 没有符合的 则返回-1
	
		比较 es5 indexOf  传参为想要得到的项，查找到对应项 返回对应项的下标 查找不到 返回 -1 
				 lastIndexOf() 也是一样 只是从后往前
	arr.fill()
		作用 填充数组
		只有一个 
			参数的时候 是全部替换数组的值
		三个参数的时候
			第一个参数表示要要替换成为的项数
			第二个参数表示从什么位置开始 注意 0 表示位置的第一位
			第三个参数表示到哪一个位置之前结束
			[1,2,3,4].fill(7,1,2) ==> [1,7,7,4]
	arr.entries()
		for(let ['i','v'] of['a','b'].entries()){ console.log(i,v) } ==> 0,a 1,b
	arr.keys()
		for(let index of['a','b'].keys()){ console.log(index) } ==> 1  2
	arr.values()
		for(let index of['a','b'].values()){ console.log(index) } ==> a   b
	
	Number
		注意此处的 isNaN（） ==>  is not a number 返回 true的时候 证明不是一个数值 返回false的时候证明是一个数值
		old isNaN 之前是window 上的属性 isNaN() 会将 内部的参数进行转换 然后在判断 
		new  Number.isNaN()  穿进去的参数不进行转换  只要传进去的参数是NaN则 返回 true
									    传进去的参数为非数值一律返回 false
		Number.isFinite() ==>  判断一个数是否无穷大 Infinity 
					       注意前提是一个数，如果是字符串或其他部位数值的参数 就会直接返回 false
		parseInt() 和 parseFloat() 还和以前以前一样 无论实在 widow 还是在 Number 上
		Number.isInteger() 判断是否为一个整数  为整数返回 true
			当然 浮点数以零补充的也为整数 Number.isInteger(3.00) ==> true
		Number.EPSILON 定义的一个极小值
		Number.MAX_SAFE_INTEGER 最大值
		Number.MIN_SAFE_INTEGER 最小值
		判断是否超出范围
			Number.isSafeInteger('参数')  判断是否在范围之内
		
		Math.sign("参数")
		判断一个数到底是一个整数还是一个小数
			为整数的时候返回1
			为负数的时候返回-1
			为小数的时候返回0
			非数值返回NaN
		
		Math.cbrt('参数')
		求一个数的立方根
	Object
		Object.is(num1,num2) 比较两个数是否严格相等 即 ===
		Object.assign(num1,num2) 
			assign 英文意思是过户给/分配
			将两个或多个对象拼接起来  如果出现重复的属性的属性的话 后边的属性会覆盖前面的属性

	Symbol
		独一无二的
			用于解决命名冲突的
		let a = Sympol('a')
		let b = Sympol('a')
		a===b  false
	
		let name = Symbol('可以传递参数')
		Object.keys("传入的是 对象名称") 只能获取到对象的非 Symbol类型的属性  
		Object.getOwnPropertySymbol("传入的是 对象名称") 只获取到 symbol 类型的属性
		对象名.ownKeys() 什么类型的属性 都可以获取到
		
		Symbol.for('name')  以参数名为依据，去全局环境中寻找以该参数命名的symbol值，
			有的话就返回，没有的话就以该参数名返回一个新的symol
		
			eg: let a = Sympol.for('name')  //注意 Sympol.for('参数名') 创建的sympol 是在全局作用域中的 供 sympol 参考。
									 //Sympol('参数名') 创建的就不是这种效果了
			    let b = Sympol.for('name')
				
				a===b true
			
			eg: let a = Sympol('name')
			    let b = Sympol.for('name')
				
				a===b false
		对于Sybol.for() 创建创建创建 的变量 想要获取名字的只能通过  Sympol.KeyFor() 来获取
			let n = Sympol.for('bbb')
			let m = Sympol.KeyFor(n) ==> bob
			
               let n = Sympol('bbb')
			let m = Sympol.KeyFor(n) ==> undefined
	Promise
		new Promise((resolve,reject)=>{})
		then,catch,all,race(只要一个符合条件就继续执行)
			


Array
	①创建的方式
		var A = new Array(3)  //创建指明的是数量
		var B = new Array('aaa')  //创建指明的是内容
		var C = ['a','b']
		
	② var color = ['a','b','c'];
	
	  可以利用 数组的长度 length 来删除/添加 数组的末尾项
		color.length=2 ==>color=['a','b']; // 删除
		color[color.length] = 'fff' ==>color=['a','b','c','fff']  //添加
	  利用下标来 直接修改数组的值
		color[1] = 'fff'  ==> color=['a','fff','c']
	
	③ 判断是否是数组 instanceof （但是存在单一环境局限性，多个环境的话 会互相应影响，导致不准确）
	  可以使用 Array.isArray(value) 来做判断
	 
	④ 数组的转换
		每个对象都有这个三个方法,不影响原数组的值，会输出一个新的值
			
		一 toString() 将数组转换为都还好链接的字符串
		二 valueOf() 将数组值 原样输出
		三 toLocaleString() 将数组显示为当地数字 就 时间为例子 美国的/中国的日期格式显示对应 逗号链接的字符串
		四 join('') 将数组的每一项通过传递的参数进行连接，输出一个对应链接符的字符串
			eg: var C = ['a','b'] var mm = C.join('??') ==> mm = 'a??b'
	⑤ 栈方法 (LIFO) ==> (Last In First Out)
		push() 像数组的末尾添加一个值，并修改数组的length,原数组增加一个值。
			返回的是数组的长度 var C = ['a','b']; var m = C.push('c'); m=3;  重点
		pop() 删除数组末尾的最后一个值,原数组删除一个值
			返回值是删除项 	   var C = ['a','b']; var m = C.pop(); m='b';  重点
	
	④ 队列方法 （FIFO）===> (First In First Out)
		push()
		
		shift()  删除数组的第一个元素
				 返回值是删除项
		unshift()  向数组前面添加项
				 返回的是数组长度
	⑦数组排序
		reverse()  数组反向排序 
				 返回的是排序过后的数组
		sort()  按照顺序进行排序
				返回的是 排序过后的数组
			使用方法
				var A = [1，3，2];
				var B = A.sort(function(a,b){
						return a-b //返回的是升序排列 // B = [1,2,3];
						return b-a //返回的是升序排列 // B = [3,2,1];
					})  
	⑧数组链接
		concat() 将拼接数组，不只是链接数组，可以连接字符串, 可以连接多个
				 返回值是 链接过后的数组
				var A = [1，3，2];
				var newA = A.concat('aa',[99,88,77]); ==>newA = [1,3,2,'aa',99,88,77]
		slice() //英文 切片  切割数组的 
				返回一个新的数组，不会影响原数组
			使用方法	
				传入一个参数 会被认为是起始位置，截取从该位置开始 包含该位置
				传入两个参数  会被认为是起始位置 终止位置  字符串开始截取的位置 从这项开始 这项 是在的
			var A = [1，3，2];
			var B = A.slice(1) // B = [1,2] 错的 ==> 正确的结果为 B = [3,2] 
			
		splice() //返回删除的数组项
			使用方法
				三个参数 
				第一个参数树 开始的位置 是索引 // 
				第二个参数是 要从该位置开始删除几项  是删除数组对应的项
				第三个参数是要替换 或者 添加的项
				返回删除的项/原数组会受到影响
					var A = [1，3，2]; var m=A.splice(0,1); ==>  A = [3,2]  这是删除     m='1'
					var A = [1，3，2]; var m=A.splice(0,1,"aaa"); ==>  A = ['aaa',3,2]  这是替换  m='1'
					var A = [1，3，2]; var m=A.splice(0,0,"aaa"); ==>  A = ['aaa',1,3,2]  这是增加   m=''
		查找对应的项的索引
	
	⑨查找位置
		indexOf() 查找到对应的项 返回对应项的下标/查找不到的话 返回-1
			使用方法
				传入一个参数的  参数会被作为传入的项 进行查找 
				传入两个参数的话  第一个参数是要查找的项  第二个参数是下标从什么地方开始
		lastIndexOf() //从数组的末尾 向前查找 返回的是 数组 小标 正向数的不是 倒着数的
	
	⑩迭代方法
		一 筛选
			every() 返回的值 为Boolean
				var A = [1,2,8,6,24,5]  
				var k =	A.every(function(item,index,array //该参数可以省略){
						return item > 2;  //此处校验的是所有的项// 如果有一项不符合则 直接返回 false
					})
					
					k = false;
			some()  返回的值 为Boolean
				var A = [1,2,8,6,24,5]  
				var k =	A.filter(function(item,index,array //该参数可以省略){
						return item > 2;  //此处校验的是所有的项// 如果有一项不符合则 直接返回 false
					})
					k = true
			filter() 返回的值 过滤后的数组
				var A = [1,2,8,6,24,5]
				var m =	A.filter(function(item,index,array //该参数可以省略){
						return item > 2;  
					})
					m = [8,6,24,5]
			map() 针对每一项进行特定的复制运算 并返回这个运算后的数组
				var A = [1,2,3]
				var m =	A.map(function(item,index,array //该参数可以省略){
						return item*2;  
					})
					m = [2,4,6]
			forEach() 类似于for 循环 没有返回值
			
	十一合并数组
			reduce()
				var A = [1,2,3]
				var m =	A.reduce(function(prev,cur,index,array //该参数可以省略){
						return prev+cur;  
					}) ==> m = 6; //数组项想 数值类型 参数相加 求和 
								  //数组项想 其他类型 拼接字符串 对象的话 会显示 object
			reduceRight() //从后往前处理
	
基本包装类型
	Number/String/Boolean

	Boolean
	
		var s1="aaaaa"  var s2 = s1.substring(2); 
			==> 实际内部执行过程
				var s1 = new String('aaaaa');
				var s2 = s1.substring(2);  
					//只能获取原型链上的方法  s1.color = 'red' 访问 s1.color ==> undefinde; 
						//因为当访问s1.color 的时候  上一步 设值得s1 已经销毁了 此时的s1 是一个新的s1
				s1 = null; //销毁s1
				
	特殊的地方
		
	String
		
		查找对应位置的字符
		
		charAt() // 返回对应下标的对应的字符
			参数表示 要查询的下标 
			eg: var a = 'qwert'; var m = a.charAt(1); ==> m='w'  ==>可以通过  [] 来访问 m = a[1]  ==> m ='w'
		
		charCodeAt() // 返回对应下标的对应的字符编码
			eg: var a = 'qwert'; var m = a.charAt(1); ==> m=119;
		
		fromCharCode()  参数为数字 
						返回的值是一个字符
		
		查找字符对应的位置
		
		都可以接受两个参数 第一个参数是要查找的项 第二个是从什么位置开始
		
		indexOf 
		lastIndexOf() 
		
		concat() //合并多个字符串 ,参数都好隔开 如果穿入的为数组 则调用 数组的 toString() 采用字符串连接方式 进行拼接
				 //不影响 原数组
			eg: var a = 'qqqqq' var m = a.concat('a',['sss','ddd','fff'],444) ==> m=qqqqqasss,ddd,fff444
		
		//截取字符串
		
		slice()  //切割字符串 和 数组是一样的
			一个参数的时候表示从哪一项开始 
			两个参数的时候 第一项表示从哪一项开始  第二项表示到哪一项之前结束 
		subString()  //和slice 是一样的
		subStr()  //不同的是 第二个参数 是有要得到几个字符 
		
		如果 只有一个参数  那么意思就是从该位置开始截取到最后
		
		当传递 负数的时候
			slice  会将所有的负参数相加字符串的总长度
			subStr 会将第一个参数加上字符串的总长度，第二个参数 如果也为负数 会被直接置为零
			substring  会将所有的负参数 转换为 0
		
		trim()  删除所有的空格
		trimLeft()  trimRight() 
		
		toLowerCase()
		toUpperCase() 
		
		toLocaleLowerCase()
		toLocaleUpperCase() 
		
		字符串的匹配方法
		match() 参数是一个正则表达式
		
			返回一个数组 每一个匹配到的都在
				var a = 'mat cat uat' ; var s = a.match(/at/g); s=['at','at','at']; //不带g的话 只要查找到就立即返回 一个项的数组
		search() 参数是一个正则表达式
		
			返回零或者负一
				var a = 'mat cat uat' ; var s = a.search(/at/); ===>s=1;
				
		replace()  第一个参数是正则表达式  第二个参数可以是一个字符串(表示要替换的项) 也可以是一个function()
			var a = 'mat cat uat'; var mm = a.replace(/at/,'000'); mm = 'm000 cat uat';
			var a = 'mat cat uat'; var mm = a.replace(/at/g,'000'); mm = 'm000 c000 u000';
								   var mm = a.replace(/ma|ca/g,function(match,pos,originText){
										//match  匹配到的项 
										//pos  匹配到项首字母的出现位置
										//originText 搜索的字符串 就是 a 本身
										
										console.log(match)  //===>'ma' / 'ca'
										
								   })
		split() 可接受两个参数 
					第一个参数是正则表达式 第二个参数是一个数字 表示 转换为数组的长度(可以省略)
				
					var a = 'mat cat uat'; var mm = a.split(' ',2); ===> mm = ['mat','cat']
					
		localeCompare() 比较两个字符串 返回-1表示它在前 返回0 表示相等 返回1表示在之后
			var a='yellow'; 
			var b=a.localeCompare('black') ==> b = 1;
	Boolean
		
		var value = 12 ;
		
		var number = Number(value);  //基本类型
		
			alert(typeof number) //Number
		
		var number = new Number(value)  //引用类型
			
			alert(typeof number) //object
			
			==> var number = Boolean(false); //基本类型  var result = number && true; result = false;
				
			==> var number = new Boolean(false);  //引用类型 var result = number && true; result = true;
					==> 分析 number = object Boolean(object // 不为空就是 true ) 所以得出上值
	
	Number
		
		① number.tostring() //里边可以限制 是几进制的  //2，8，10，16
			eg: var num = 10; console.log(num.toString(2)) ==> 1010
		② number.toFixed(2)
			eg: var num = 10.167; var aa = num.toFixed(2) ==>  aa=10.17
		③ number.toPrecision() //是根据需要自动显示的指数格式 参数表述数值的位数  //单词意思 精度
			eg: var num = 10; var aa = num.toPrecision(1)  ==> aa = 1e+1;
		
transform  //释意  运动
	translate(x,y)  2D 转换 沿着X和Y 轴平移  //释意 转化
	3D  translate3D(x,y,z)
	translateX() 沿着 X 轴平移
	translateY() 沿着 Y 轴平移
	translateZ() 沿着 Y 轴平移
	
	scale(x,y)  沿着X或Y 缩小 或 放大  //释义  比例
	scale3D(x,y,z)
	scaleX() 
	scaleY()
	scaleZ()
	
	rotate(angle) // 释义 旋转   旋转这个图片
	rotate3D(x,y,z,angle)
	单独设置只有3D 有
	rotateX(angle)
	rotateY(angle)
	rotateZ(angle)
	
	skew(x-angle,y-angle) //释义 歪斜 以X 轴为基准进行歪斜
	skewX()
	skewY() 
	
	perspective() 定义三D 转换的透视试图
	
	
	3D 独有
	transform-origin(x,y)  运动原点
		这里就类似于 钉钉子 钉子钉在元素的内部 让 元素以该点 进行transform的相关操作 默认情况下是50% 50% 进行操作的
		（40%，50%） 就是针对元素自身的百分比进行查找
		left top  ==> 0% 0%
		right bottom ==> 100% 100%
		最好放在底部
		
	
	其余 有待研究
	
	http://www.runoob.com/css3/css3-3dtransforms.html
	
transition
	transiton-property    //运动的名称
	transiton-duration	  //运动时间
	transiton-timing-function  
		linear   以相同速度开始至结束的运动
		ease     以慢速开始 然后变快 然后慢速结束 
		ease-in  以慢速开始的过度效果
		ease-out 以慢速结束的过渡效果
		ease-in-out 以慢速开始和结束的过度效果
		cubic-bezier(n,n,n,n) 
	transiton-delay 延迟
	
	缩写 transition: property duration timing-function delay;
	
animation
	animation-name              keyframe名称
	animation-duration          花费的时间
	animation-timing-function   速度曲线
		linear   以相同速度开始至结束的运动
		ease     以慢速开始 然后变快 然后慢速结束 
		ease-in  以慢速开始的过度效果
		ease-out 以慢速结束的过渡效果
		ease-in-out 以慢速开始和结束的过度效果
		cubic-bezier(n,n,n,n)
	animation-delay             延迟
	animation-iteration-count   次数（infinite  无线次数）
	animation-direction         规定是否轮流反向播放动画（normal | alternate）
	缩写 animation: name duration timing-function delay iteration-count direction;
	
	两种动画的编写方式
	@keyframes 运动名称 {
		from { left: 0px }
		to { left: 200px }
	}
	@keyframes 运动名称 {
		0% { left: 0px }
		10% { left: 200px }
		20% { left: 200px }
		100% { left: 200px }
	}
	
省略号

	单行
	overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
	
	多行
	overflow : hidden;
	text-overflow: ellipsis;
	display: -webkit-box;
	-webkit-line-clamp: 2;
	-webkit-box-orient: vertical;
	
	
	此属性不设置  默认是 border-box
	box-sizing：规定边框算不算高度的问题
		content-box 设置的 height 不包含 border 即  元素总高度 = height + border
						如：设置了 height:100px;再设置border：10px solid red; 那么 获取元素高度的时候就为 120
		border-box  设置的 height 再设置border 是包含在height内部的  
						如：设置了 height:100px;再设置border：10px solid red; 那么 获取元素高度的时候就为 100 

css3 选择器
	
	div,p 并列关系
	div>p 归属关系  m:选择div 下所有的P
	div+p 并列关系  m: 选择紧挨 div 的所有p 元素
	
	//属性过滤不用加引号
	a[target] 相应属性的选择  m: 选择a元素 属性名为 'target' 的元素
	a[target=aa] 相应属性和值的选择  m:选择属性名为 'taget' 其值为'aa' 的a元素
	a[target~=aa] 相应属性和值的选择  m:选择属性名为 'taget' 其值中，包含'aa' 单词的a元素 要以 空格隔开
	a[target|=aa] 相应属性和值的选择  m:选择属性名为 'taget' 其值中，包含'aa' 单词的a元素 要以 -隔开
	
	//记得加引号（类似于正则查找）
	a[target^='aa'] 选取以aa 字符开头的 该属性 a 元素
	a[target$='aa'] 选取以aa 字符结尾的 该属性 a 元素
	a[target*='aa'] 选取包含aa 字符串的 该属性 a 元素
	
	//target 可设置为任何属性
	
	a:hover 
	a:link  选择未被访问的链接
	a:visited  选择所有已被访问的链接
	a:active 点击链接的时候
	
	input:focus 选择获得焦点的 input 

	:first-letter  p:first-letter 选择p元素内容的首个字母 进行样式设置
	:first-line    p:first-line 选择p元素内容的首行字母 进行样式设置
	
	//要被自己的父元素包裹否则会导致无效
	//且要注意要控制的元素在不在是否是在同一个父元素包裹
	//有可能是多个父元素 包裹多个子元素，那样的话是会获取多个的
	
	:first-child  选择父元素的首个(结构上的) 子元素 
		p:first-child 任何父元素的首个p子元素 前边可以限制区域的 元素内部元素的首个元素是p元素才能被选取
	:last-child
	:only-child   选择父元素唯一子元素
	:nth-child(n)  选择父元素的第n个元素
	:nth-last-child(n)  倒着数的
  	
	:first-of-type  选择父元素的首个（类型上的）子元素  
		选择父元素内部 该类型的首个元素
	:last-of-type
	:only-of-type  选择父元素下 唯一类型的 子元素
	:nth-of-type(n) 
	:nth-last-of-type(n) 
	
	:root 选择文档的根元素 (:root) 就是这么用
	p:empty 选择没有子元素的每个p元素 
	
	:target   选择当前活动的#news 元素
		<p><a href="#news1">跳转至内容 1</a></p>
		<p id="news1"><b>内容 1...</b></p>
	
	input:enabled  选择每个 启用的input 元素
	input:disabled 选择每个禁用的input 元素
	
	::selection 选取被用户选取的元素部分
	
	
	:before 在元素内容之前插入内容 <p>aaa</p>  p:before { content:'台词 ：' } ==>  台词：aaa
	:after 在元素内容最后插入内容 <p>aaa</p>  p:before { content:'台词 ：' } ==>   aaa台词：

	:lang('en')  选择有以 en 开头的lang 属性的 每个 p 元素
	
	p~ul 选取前面有p元素的 每个ul 元素
	
						
BOM => windows 双重角色  
	   既是 javascript 访问浏览器窗口的一个接口
	   又是 ECMAScript 规定的Global 对象
	
	var a=1;  window.a = 1; ===> delete window.a ===>抛错 
			  原因: [[configurable]]  被设置为了 false
			  
	尝试访问 未声明的属性 会报错
		var a = b ==> 抛错 a = undefinded
		var a = window.b  ==> 不会报错 因为是 属性查询
	
	screenX/screenY(chrome)  screenLeft/screenTop(IE,chrome)
		moveTo(x,y) x y  分别表示 窗口要移动到的新坐标
		moveBy(x,y) x y  分别表示 窗口需要移动的 x和y 方向上 对应的距离
	
	//只适用于window
	innerWidth/innerHeight  
	outerWidth/outerHeight
	
	document.documentElement.clinetWidth
	document.documentElement.clinetHeight
	
	document.body.clinetWidth
	document.body.clinetHeight
	
	compatMode  标准模式 （不理解）
	
		混杂模式
			document.body
		标准模式	
			document.documentElement
			
	document.documentElement.clinetWidth
	document.documentElement.clinetHeight
	
	document.body.clinetWidth
	document.body.clinetHeight
	
	window.open()
	
	var timeoutID = window.setTimeout(function(){
		//内容
	},100)  //  timeoutID 为setTimeout（超时调用） 返回唯一的标志ID 
	
	要取消 超时调用 则 将 ID 传递给 clearTimeout(ID) 将对应的 clearTimeout 取消掉
		
		setInterval clearInterval() 同理可得
	
	提示框
		alert('内容') 用户只能点击确定
		
		confirm('内容')  用户可以点击或取消 
			点击 ok 返回 true
			点击 cancle 返回 false
			if(confirm('内容')) //相关处理
		
		prompt()  带有输入框的提示框 
			用户提交内容 点击 会将 填写内容返回
			否则 返回 ‘’ 或 null
		
		window.find('内容') 查找 整个页面的内容 是否含有‘相关内容’
			有 则 返回 true
			没有 返回 false
	
	window.location === document.location  引用的是一个对象
	
	location
		location.href //返回整个url
		location.serch  // 返回从 ？ 开始到最后的 不包含#号部分
		location.protocol // 返回协议 eg: 'http:'
		location.pathname   //返回文件目录部分
		location.hash  // 返回 # 开始到最后的
		location.port  //返回端口 
		location.host  //返回服务器名字和端口号
		location.hostname //返回不带端口号的服务器名字
		
		截取字符串的时候 记得 使用 decodeURIComponent(value) 解码
	
	location.assign() 参数为URL 
		功能同等于 window.location = url  / location.href = url
		
	location.replace() 
		改变页面 url 后 不会改变留下 浏览记录
		
	location.reload() 刷新 页面  //有可能从缓存中加载
	location.reload(true) 刷新 页面  //从服务器重新加载
	
	识别客户端浏览器
	
	navigator.userAgent  浏览器的用户代理字符串
	navigator.userLanguage  操作系统的默认语言
	navigator.userProfile   借以访问用户个人信息的对象
	navigator.vendor   浏览器的品牌
	navigator.vendorSub   有关供应商的次要信息
 	navigator.plugins  浏览器中安装的插件信息的数组
 		
	navigator.plugins[i].name   插件的名字
	navigator.plugins[i].description    插件的描述
	navigator.plugins[i].filename   插件的文件名
	navigator.plugins[i].length   插件所处理的MIME类型数量
		
	screen.acailHeight	
	screen.acailWidth	
	screen.left	
	screen.top	
	screen.width	
	screen.height	
	
	histoty.go(-1) 后退一页
	histoty.go(1) 前进一页
	histoty.go(2) 前进两页
	histoty.go('www.baidu.com')  如果浏览记录里有这个记录，则直接跳到这个记录里
								 如果没有记录， 那么这个方法什么也不做
								 如果有多条该记录则以 最新的那条记录为准
	histoty.back()
	histoty.forward() 
								 
事件
	每个事件包含三个阶段
		事件捕获阶段  document-elelment(html)-element(body)-element(div）
		处于目标阶段 
		事件冒泡阶段  element(div）-element(body)-elelment(html)-document
	
	DOM0事件处理程序
		var btn = document.getElementById('myBtn')
			btn.onclick=function(){
				alert(this.id)   
			}   ==>  myBtn  
				作用域是 元素的作用域内
	
	DOM2级事件处理程序
		非IE 的情况下 event 两种情况都可以作为参数进行传递 event 对象
		var btn = document.getElementById('myBtn')
			
			btn.addEventListener("click",function(){
				alert('nnn')
			},false) 此处的false 表示冒泡阶段调用事件处理程序
					 此处的true  表示捕获阶段调用事件处理程序
			btn.removeEventListener("click",function(){
				alert('删除') 
			},false)  这样处理 是无效的
			
			正确的处理方式是：
			var handler = function(){...}
			btn.addEventListener("click", handler, false)
			btn.removeEventListener("click", handler, false)
		
			IE的处理 
			DOM0 
				event 是通过 window.event 来访问的
			
			btn = document.getElementById('myBtn')
			btn.onclick=function(){
				alert(this.id)   
			}   ==>  myBtn  
				 注意是onclick
				（IE只有事件冒泡流程）
				作用域是全局 ==> window
			
			DOM2 是通过传参形式进行event的传播的
			btn.attachEvent("onclick",function(){ this === window })
			btn.detachEvent("onclick",function(){ this === window }) //此处删除处理程序和上部是一致的
			
			window.event.cancleBubble = true  取消事件冒泡
			window.event.srcElement ==> 相当于 target
			window.event.returnValue = false  取消事件默认行为
			type
			
	event
		bubbles  表明事件是否冒泡
		stopImmediatePropagation() dom3 待了解
			取消事件的进一步冒泡或捕获 同时组织组织任何事件处理程序被调用
		stopPropagation()  阻止事件冒泡或捕获 bubbles为true 则可取消
		
		cancelable  取消事件的默认行为
		preventDefault()   cancelable 为true 则可调用该方法
		
		currentTarget  
			事件处理程序内部 this  始终等于  currentTarget
			就是那个元素上 注册注册注册 了事件处理程序
		target  就是 时间的目标 也就是 时间处于目标阶段的元素
		
		detail  与事件相关的细节信息
		type  事件的类型
		trusted  为true 则表示时间是浏览器生成的 为false 表示事件开发人员通过 javascript 生成的（dom3）
		
		eventPhase  时间的相应阶段
						1 代表捕获阶段  2 表示处于”目标阶段“  3 处于冒泡阶段
									目标阶段属于冒泡阶段 但是 eventPhase 的值是 2
									但出于 目标阶段时  event.eventTatget === event.target
						
	UI事件
		load()
			1. 页面加载完触发
			2. 所有框架处理完触发
			3. img 资源加载完触发
			4. 当嵌入的内容 加载完毕时在<object>元素上触发
		error()
			针对上面每个的失败处理
		unload()
			当页面卸载后触发
		abort()
			1. 当用户停止下载过程时触发
			2. 嵌入的内容没有加载完时触发
		select()
			当用户选择 input / textarea 中的一个或多个字符串时触发
		resize()
			当窗口或框架大小变化是在 window 或 框架上面触发
		scroll()
			当用户滚动带滚动条的元素的内容时触发 
	
	焦点事件
		focus()
		blur() 
	
	鼠标指针在视口的位置 即相对于整个浏览器窗口的
		clientY clinetX
		相对于页面视口（body）的横向距离，即: 该点击点儿到视口（body）左上角的横向距离
		（整个页面整个页面整个页面(内部的滚动条无效)如果有滚动条滚动的时候（向上））该值会跟随滚动缩小
		如果这个页面没有滚动条，clientX===pageX
	鼠标指针相对于页面的位置
		pageX pageY
		
		相对于页面视口（body）的横向距离，即: 该点击点儿到视口（body）左上角的横向距离
		（整个页面整个页面整个页面(内部的滚动条无效)如果有滚动条滚动的时候（向上））该值会跟随滚动增加
		如果这个页面没有滚动条，clientX===pageX
		
		//计算相对页面的滚动位置
		if(event.pageX == undefined){
			pageX = event.clientX + (document.body.scrollLeft || document.documentElement.scrollLeft)
		}
		
	鼠标指针相对与 整个屏幕的
		screenX screenY 
		针对屏幕左上角的横向距离
	这是IE的
	offsetX
		光标相对目标元素边界的x坐标
		始终针对事件元素内部，之时针对内容区域，不包含padding,margin,border
		
	offsetY
		光标相对目标元素边界的y坐标
	clientWidth/Height   内容区的宽/高  包含padding,不包含margin,border 
						 如果内容自己的内容区有滚动条，那么 实际宽高就等于 content-滚动条的宽度（只是滚动条的宽度）
						 内部有滚动区域的内容则不包含滚动区域的高度
	offsetWidth/Height	 内容区的宽/高  包含padding,border, 不包含margin,
						 内部有滚动区域的内容则不包含滚动区域的高度
	scrollWidth/Height   内容区的宽/高  包含padding,border,滚动区域的部分 不包含margin
						 内部有滚动区域的内容则包含滚动区域的高度
	div.offsetLeft
		针对的是整个div之外到父元素的横向距离（元素外边框到父元素内边框为止）
	div.offsetTop
		针对的是整个div之外到父元素的纵向距离（元素外边框到父元素内边框为止）
		
	div.clientLeft
		左边框的大小
	div.clientTop
		上边框的大小
	
	div.scrollTop
		元素纵向滚动的高度
	div.clientLeft
		元素横向滚动的距离
		
	moseout,mouseover
		页面中只有一个div,鼠标指针在div上
			当鼠标移出div时，div上执行的是mouseout  body 上执行的是 mouseover
	mousedown,mouseup
		只针对鼠标的点击事件
			会返回一个button 属性 event.button
				0 没有按下按钮
				1 按下鼠标主按钮（左键）
				2 按下鼠标次按钮（右键）
				3 同时按下左右键
				4 按下中间的鼠标按钮
				5 左中
				6 右中
				7 同时按下三个鼠标按钮
				
	mousedown和mouseup 两个事件都完成才算一个点击
		detail中包含里一个属性 表示点击的次数 如果 mousedown 和 mouseup 换了位置该属性会被置为0
	
	mouseWheel
		滚轮事件 
		btn.addEventListener("mouseWheel", function(event){
			console.log(event.mouseWheel)
		}, false)
		
	键盘事件
		keydown  
			键盘按下任意键触发（如果按住不放会重复触发该事件）
		keypress 
			键盘字母键按下触发（如果按住不放会重复触发该事件）
		keyup
			释放按键时触发
		
		event.keycode
	
	textInput,keypress
		任何可以获得焦点的元素都可以触发keypress
		只有可编辑区域才能触发除法 textInput
		
		textInput 用户按下实际输入的字符时触发
		
		keypress 按下那些能够影响文本的现实的键时触发 
		
		btn.addEventListener("textInput", function(event){
			event.data 
			0 不确定浏览器是怎么输入的
			1 键盘输入的
			2 文本粘贴过来的
			3 拖放进来的
			4 文本使用 IME 输入的
			5 文本通过在表单中选择某一项输入的
			6 手写输入
			7 语音输入的
			8 几种方法组合输入的
			9 脚本输入的

		}, false)
		
	contextmenu
		修改右键菜单
		
		取消右键菜单 event.preventDefault() || event.returnValue = false 
		div.addEventListener("contextmenu", funciton(){
			div2.style.left = event.clientX + "px"
			div2.style.top = event.clientY + "px"
			div.style.visibility = "visible"
		})
	
	window.orientation
		判断屏幕方向
			0 肖像模式 
			90 向左旋转的的横向模式 （home键在右侧）
			-90 向左旋转的的横向模式 （home键在左侧）
			
	touchstart
	touchmove
	touchend
	touchcancel
	
	touches 当前跟踪触摸操作的 Touch 对象的数组
	targetTouches: 特定于事件目标的Touch对象的数组
	changeTouches: 自上次触摸以来发生了什么改变的Touch对象的数组
	
	每个touch对象包含
		clientX  
		clientY
		screenX   
		screenY
		pageX	 
		pageY
		identifier 
		
	事件委托
		原理是利用事件冒泡机制
			可通过捕获 target.id 进行相应事件的控制
	<div id=“a”>
		<p id="b"></p>
		<p id="c"></p>
		<p id="d"></p>
	</div>
		
		$("#a").click(function(e){
			swith(e.target){
				case: "b":
					dosomething
				case: "c":
					dosomething
				case: "d":
					dosomething
			}
		})
	
弹性布局
	display: flex | inline-flex
	display: -webkit-flex 
			
	
	
	//方向
	flex-direction: 
		row (默认值,主轴方向，起点在左端)
		row-reverse （起点在右端）
		column 主轴为垂直方向，起点在上沿 
		column-reverse （起点在下沿）
	
	//是否换行 默认是不换行的
	flex-wrap:
		nowrap  默认： 不换行
		wrap 	换行，第一行在上方
		wrap-reverse  换行， 第一行在下方
	
	//flex-direction 和 flex-wrap 两个属性的合并
	flex-flow: row  nowrap
		默认值为 row  nowrap
	
	//项目在主轴的对齐方式
	justify-content:
		flex-start: （默认值）左对齐
		flex-end	右对齐
		center      居中
		space-between  两端对齐，项目之间的间隔相等
		spce-around    项目两侧的间隔相等（第一个是类似剧中的情况）
	
	//子元素的对齐方式
	align-items:
		flex-start: 交叉轴（竖轴起点对齐）
		flex-end:  交叉轴（竖轴终点对齐）
		center:	  交叉轴（竖轴中心对齐）
		baseline:  项目的第一行文字的基准线对其
		stretch:  如果项目未设置高度或设为auto 将占满整个屏幕
	
	//多跟轴线的对其方式 （如果只有一根轴线，该属性不起作用）
	align-content:
		flex-start: 交叉轴（竖轴起点对齐）
		flex-end:  交叉轴（竖轴终点对齐）
		center:	  交叉轴（竖轴中心对齐）
		space-between:  两端对齐，项目之间的间隔相等
		spce-around：（不理解） 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍
		stretch:  如果项目未设置高度或设为auto 将占满整个屏幕
		
	项目上的属性设置（item 上的设置）
		//属性定义项目的排列顺序。数值越小，排列靠前，默认为0 可以设置为负数
		order
		
		//属性定义项目的放大比例默认为0 
			为0时,即使有剩余空间也不放大
		flex-grow:
		
		//属性定义了项目的缩小比例， 默认为1 即如果空间不足，该项目将缩小
		flex-shrink:
		
		//属性定义了分配多余空余空间之前 项目占据的主轴空间
			浏览器根据这个属性计算主轴上是否有多余空间默认值是auto
		flex-basis
		
		flex: 0 1 auto
			flex-grow flex-shrink flex-basis (后两个属性是可选参数)
			
		//设置项目自己的对其方式，此方式会覆盖align-items的属性 
			默认为 auto 如果没有父元素， 则等同于 stretch
		align-self: 
			auto
			flex-start
			flex-end
			center
			baseline
			stretch
		
ajax
	同源策略
		相同的 （域 端口 协议）
	XMLHttpRequest
	
	var xhr = new XMLHttpRequest()
		xhr.open('get', 'example.php', false)
			//参数解读
				请求类型  请求的地址  是否异步发送请求
		xhr.send(null)
			// 这里的参数是要拼接在 请求地址后边的参数
		xhr.responseText 作为响应主题返回的数据
		xhr.responseXML 如果响应的内容类型为 text/xml / application/xml
		xhr.status 响应的Http状态
			//200  请求成功
			//304  请求的资源并没有被修改，可以直接修改浏览器中缓存的版本
		xhr.statusText Httpz 状态的说明
		xhr.readyState 
			// 0 未初始化  尚未调用 open() 
			// 1 启动 已经调用 open()方法 但尚未调用send() 方法
			// 2 发送 已经调用 send() 尚未接收到响应
			// 3 接收 已经接受到相应数据
			// 4 完成 已经接收到全部响应数据 可以在客户端使用
		var xhr = new XMLHttpRequest()
		xhr.onreadystatechange = function() {
			if(xhr.readyState == 4) {
				if( (xhr.status >= 200 && xhr.status <300) || xhr.status == 304 ) {
					alert( xhr.reponseText )
				}
			}
		} 
		xhr.open('get', 'example.txt', true)
		xhr.send(null)
		
		在接受响应之前,取消异步请求 
			xhr.abort() 
		
	HTTP 头部信息
		每个HTTP请求和响应都会带有相应的头部信息
			有两种头部信息
				请求头部, 响应头部
		在发送XHR 请求的同时，还会发送下列头部信息
			Accept 浏览器能够处理的内容类型
			Accept-Charset  浏览器能够显示的字符集
			Accept-Encoding 浏览器能够处理的压缩编码
			Accept-language 浏览器当前设置的语言
			Connection  浏览器与服务器之间连接的类型
			Cookie  当前页面设置的任何Cookie
			Host    发出请求的页面所在的域
			Referer 发出请求 页面的url
			User-Agent 浏览器的用户代理字符串
		
		//设置自定义 请求头部信息
			//此方法在open() 之后 在 send() 之前
		xhr.setRequestHeader("MyHeader","MyValue")
			//参数解读
					自定义头部信息
					自定义头部信息的值
		
		//获取某个的响应头部信息
		xhr.getResponseHeader("MyHeader")
		//获取所有的响应头部信息
		xhr.getAllResponseHeaders()
		
		url 后拼接的请求参数需要使用 encodeURIComponent() 
									 decodeURIComponent() 解码
		
		xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded") 
		
			
		序列化处理表单数据
		var form = documen.getElementById('formID')
			xhr.send(new FormData(from))
		
		var xhr = new XMLHttpRequest()
		xhr.onreadystatechange = function() {
			if(xhr.readyState == 4) {
				if( (xhr.status >= 200 && xhr.status <300) || xhr.status == 304 ) {
					alert( xhr.reponseText )
				}
			}
		} 
		xhr.open('get', 'example.txt', true)
		//设置请求超时时间
			xhr.timeout = 1000
			xhr.ontimeout = function(){
				//超时时的处理逻辑
			}
		xhr.send(null)
		
		重写 xhr 响应的MIME类型
		在xhr.send() 方法之前调用 xhr.overrideMimeType()
		
	跨域请求
		1. 设置对应的响应头部信息
		2. JSONP  json width padding
			格式 回掉函数和数据
				callback({"name":"nicholas"})
			src属性指定一个跨域的url 都有能力不受限制地从其他域加载资源
			格式：CORSurl?callback=handleresponse
					CORS ==> Cross-Origin Resource Sharing (跨源资源共享)
			function handleresponse(res){
				==> res 就是跨域请求到的数据
			}
			
			var script = document.createElement("script")
			script.src = "CORSurl?callback=handleresponse"
			document.body.insertBefore(script, document.body.firstChild)
表单
	HTMLFormElement（下面是他的属性）
		acceptCharset	服务器能够处理的字符集 等价于HTML 中的 accept-charset 属性
		action 接受请求的 url 等价于 HTML 中的action 特性
		elements 表单中所有控件的集合
		enctype 请求的编码类型
		length  表单中空间的数量
		method  要发送的http请求的类型 get post
		name    表单的名称
		reset() 将所有表单域重置为默认值
		submit() 提交表单
		target  用于发送请求和接受响应的窗口名称
	提交表单
		//通用表单
		<input type="submit" value="Submit Form"  />
		//自定义提交表单
		<button type="submit">Submit Form</button>
		//图像按钮
		<input type="image" src="xxx.gif" />
		以上三个按钮中的任何一个按钮在表单中 回车的时候都会提交该表单
		var form = docume.getElementById('myForm')
			form.submit()  //此时不会出发submit 事件 可在此之前监听 form 的submit 事件
						   //可以调用 阻止默认事件来阻止 此事件
							form.addEventListener('submit',function(event){
								from.perventDefault(event)
							})
		如果长时间没反应的话，用户会多次提交。比如 多下好多单
			//解决办法
				1.在第一次提交表达后，就禁用该按钮
				2.利用onsubmit事件处理程序取消后续的表单提交操作
	重置表单
		<input type="reset" value="Reset Form"  />
		<button type="reset">Reset Form</button>
			//会触发 reset 事件 
			//也可通过 form.reset() 来调用
			//与调用submit() 方法不同，调用reset()方法回像单机重置按钮一样出发reset 事件
	表单字段
		每个表单都有elements属性，该属性书表单中的集合是一个数组
			//是有序的 可以通过表单在出现的顺序来访问对应的表单元素
			//也可以通过name 属性来访问表单元素 如：form.elements['haha'] //即为访问Name叫haha 的表单元素
			
			//如果有多个name 相同的表单控件，那么就将获得以该name命名的NodeList  类型为数组类型
	表单字段共有的属性
		disabled 布尔值  当前字段是否被禁用
		form  只想当前字段所属表单的指针
		name  当前字段的名称
		readOnly  布尔值，表示当前字段是否只读
		tabIndex  表示当前字段的切换（tap）序号
		type  表示当前字段的类型 如： checkbox radio 等
		value 当前字段要被提交到服务器的值
				//对于文件字段来书，这个属性是只读的，包含文件在计算机中的文件路径
		
		required 非空
		<input type="email" name="email"/>
		<input type="url" name="homepage"/>
		number range datetime datetime-local date month week time
		<input type="number" min="0" max="100" step="5" name="count" />
		
		
	自动获取焦点
		aotofocus 属性  //自动获得焦点
	事件	
		blur
		focus
		change //change <input> <textarea>  元素，在他们失去焦点且value值变化时触发
		   //<select>  在其选项改变时触发
	文本框脚本
		<input type="text" size="25" maxlength="50" value="初始值" > 
			//size 为文本框中能够显示的字符数
			//maxSize 文本框最大可以接受的字符数  
		<textarea rows="10" clos="10">初始值</textarea>
			//rows 文本框中的字符行数 
			//clos 文本框中的字符列数 
	选择脚本
	var ha = form.elements['haha']
		ha.select() 选择文本框中的所有文本
		
		//截取想要的字符串
		funcition selectText(textBox, startIndex, endIndex){
			//非IE的
			if(textBox.setSelectionRange){
				textBox.setSelectionRange(startIndex, endIndex)
			} else if(textBox.creatTextRange){
				var range = textBox.creatTextRange()
				range.collapse(true) //全部选择
				range.moveStart('chatacter', startIndex)  
				range.moveStart('chatacter', endIndex - startIndex)  
				range.select()
			}
			textBox.focus() 
		}
		
	自动切换焦点
		设置maxlength
			//逻辑判断 如果target.value.length == target.maxlength 
					   然后调用 var form = target.form 
								for(var i=0; i< form.elements.length; i++){
									if(form.elements[i] == target){
										if(form.elements[i+1]){
											form.elements[i+1].focus() 
										}
									}
								}
								form.focus() 
			
	所有表单字段都有 checkValidity() 这个方法
	
		//应用到表单上时返回的是对应表单的值是否有效									  
		if( document.forms[0].elements[0].checkValidity() ){
			字段有效
		}
		//应用到整个form上时验证整个表单是否有效
		if( document.form[0].checkValidity() ) {
			字段有效
		}
		
		//告诉你哪里出了错
		input.validity
			返回值：
				customError  如果设置了setCustomValidity() 则返回 true 否则返回 false
				patternMismatch   如果值与指定的pattern不匹配 则返回true
				rangeOverflow  如果值比max值大，则返回true
				rangeUnderflow 如果值比min值小，则返回true
				stepMisMatch   如果min和max之间的步长值不合理，返回 true
				tooLong        如果长度超过了maxleng属性指定的长度 （有些浏览器可能永远返回false）
				valid          如果这里其他属性都是false, 则为true
				typeMisMatch   如果值不是email或url 要求的格式会返回true
				valueMissing   如果标注了required 的字段中没有值，则返回true
				
				if(input.validity && !input.validity.valid) {
					//这里开始针对对应的情况进行判断
					if( input.validity.valueMissing ) {
						alert( '请填入一个值，sir' )
					}
				}
		禁用验证
			<form mehtod="get" action="...php" novalidate>
			</form>
			
			<form mehtod="get" action="...php">
				<input type="submit" value="默认" >  点击这个按钮会验证表单
				<input type="submit" formnovalidate value="默认" >  点击这个不会验证表单
			</form>
	
    选择框脚本
		HTMLFormElement（下面是他的属性）
			针对的是select
				add(newOption, relOption) 向控件中插入新<option> 位置在相关项之前
				multiple 布尔值  表示是否允许多项选择 等价于 HTML 中的 multiple
				options  控件中所有<option>元素的HTMLCollection
				remove(index) 移除给定位置的选项
				selectIndex 基于0的选中项的索引，如果没有选中项，则值为-1
											对于支持多选的控件，只保存选中项中第一项的索引
				size 选择框中可见的行数
				
				针对的是option
					index 当前选项在options集合中的索引
					label 当前选项的标签
					selected 默认选中
					text 选项的文本
					value 选项的值
		
		<select>
			<option selected>aaaa</option> //selected 默认选中
		</select>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
		
		
		
		
		
		
		
	instanceof 实例（用于检测数组）	
		
ajax	
	页面向服务器发送请求数据的技术
comet
	服务器向页面推送数据的技术
		能够让信息几乎实时的推送到页面上（适合体育比赛，股票）
	//实现的两种方式
	长轮询和流
		长轮询是传统轮询（短轮询）的一个翻版 
			页面发起一个到服务器的请求，然后服务器一直保持打开状态，直到有数据可发送 
				发送完数据后，浏览器会重复上述操作。这一过程在页面打开期间一直持续不断
		
		短轮询 浏览器定时向服务器发送请求 看看有没有更新的数据
	
	无论是长轮询还是短轮询，浏览器都要在接受数据之前，先发送请求到服务器，两者最大的区别在于
	服务器何时发送数据，短轮询是服务器立即响应，无论数据是否有效，而长轮询是等待数据响应，轮询的
	优势是所有浏览器都支持
	
	HTTP流
		在页面的整个生命周期内只有一个http连接，具体来说就是浏览器向服务器发送一个请求，而服务器一直保持链接打开
		然后周期性的向浏览器发送数据
		所有服务端语言都支持打印到输出缓存然后刷新（将输出缓存中的内容一次性的全部推送给客户端）的功能
		这正是http流的关键所在
		
	SSE（Server-Sent Events 服务器发送事件）
		SSE API 用于创建到服务器的单向链接，服务器通过这个链接可以发送任意数量的数据。
		服务器响应的MIME 类型必须是 text/event-stream,浏览器中的javascript API能解析格式输出。
		SSE 支持短轮询、长轮询 和 http流，而且能在断开连接时确定何时重新连接
		
		var source = new EventSource('my.php') 之一此url 必须与创建对昂的页面同源
			source.readyState
				0 ==> 正在连接服务器
				1 ==> 打开了链接
				2 ==> 关闭了链接
			source.onopen = funciton(){}  在建立连接时触发
			source.onmessage = funciton(event) {}  从服务器接收到新事件时触发
			source.onerror = function() {}  在无法建立连接时触发
			
			强制断开连接，并且不再建立连接
			source.close()
		HTTP流
			第一次返回的数据是 data:foo 第二个是 data:bar  第三个是message 值为 “foo/nbar”
			对于多个连续的以data:开头的数据行，将作为多行数据解析，每个值之间以 一个换行符分割
			只有在包含data:的数据后面后空行时，才会触发 message 事件
			因此在服务器上生成事件流不能忘了多添加这一行

Web Sockets
	由于web socket 使用了自定义的协议，所以 URL 模式不同，
		未加密的链接 不在是 http:// 而是 ws://
		加密的链接也不是 https:// 而是 wss://
			在使用webSocket URL 时，必须带着这个模式，因为将来还有可能支持其他模式
	使用自定义协议而非HTTP协议的好处是，能够在客户端和服务器之间发送非常少量的数据，而不必担心HTTP
	那样字节级的开销。由于 web sockets 非常适合移动应用。
		缺点在于 制定协议的时间比制定javascript API 的时间还要长
	
	var socket = new WebSocket("ws:www.my.com/me.php")
		必须给web sockets 构造函数传入绝对url。同源策略对 web sockets  不适用，因此可以通过它打开到任何站点的链接
		至于是否会与某个域中的页面通信，则完全却决于服务器（通过握手信息就可以知道请求来自何方）
			
	实例webSockets 对象后 浏览器就会马上尝试连接
		会有readyState 属性，值如下
		socket.OPENING(0) 	正在建立连接
		socket.OPEN(1) 	正在建立连接
		socket.CLOSING(2) 	正在关闭连接
		socket.CLOSE(3) 	正在关闭连接

		要关闭web socket 链接，可以在任何时候调用close()
		socket.close()
		调用close() 之后，readystate 的值立即变为2 （正在关闭）
		而在关闭连接后就会变成3
		
	var socket = new WebSocket("ws:www.my.com/me.php")
		socket.send('任意字符串')
			只能通过链接发送纯文本数据，所以对于复杂的数据结构，在通过链接发送之前必须进行序列化
			var mes = {
				time: new Date(),
				text: "Hello world"
			}
			socket.send(JSON.stringfy(message))
			
	var socket = new WebSocket("ws:www.my.com/me.php")
		socket.onopen = function() {}
		socket.onerror = function() {}
		socket.onclose = function() {}
		
		这三个事件中，只有close事件的event对象有额外的信息。
		这个事件的事件对象有三个额外的属性： wasClean code reason
		其中，wasClean 是一个布尔值，表示链接是否已经明确的关闭
		code shi 服务器返回的数值状态码
		reason  是一个字符串，包含服务器发回的消息
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
			
		
		
		
		
		
		
		